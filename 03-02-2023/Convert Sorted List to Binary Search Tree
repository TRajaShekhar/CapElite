class Solution {
    public TreeNode sortedListToBST(ListNode head) {
       if(head==null)return null;
       return covertListtoBST(head,null);
    }
    public TreeNode covertListtoBST(ListNode head,ListNode tail){
        ListNode fast=head;
        ListNode slow=head;
        if(head==tail)return null;
        while(fast!=tail && fast.next!=tail){
            fast=fast.next.next;
            slow=slow.next;
        }
        TreeNode root=new TreeNode(slow.val);
        root.left=covertListtoBST(head,slow);
        root.right=covertListtoBST(slow.next,tail);
        return root;
    }
}

//Method2
class Solution {
    public TreeNode sortedListToBST(ListNode head) {
        List<Integer> arr=new ArrayList<Integer>();
        if(head==null)return null;
        ListNode curr=head;
         arr.add(curr.val);
        while(curr.next!=null){
           
            curr=curr.next;
             arr.add(curr.val);
        }
        return convertarrtoBST(arr,0,arr.size()-1);        
    }
    public TreeNode convertarrtoBST(List<Integer> arr,int start,int end){
        if(start>end)return null;
         
        int mid=(start+end)/2;
        TreeNode newnode=new TreeNode(arr.get(mid));
        newnode.left=convertarrtoBST(arr,start,mid-1);
        newnode.right=convertarrtoBST(arr,mid+1,end);
        System.out.println(newnode);
        return newnode;
    }
}
